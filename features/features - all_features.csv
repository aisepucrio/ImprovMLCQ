Name,Description,Y,FS1,FS2,FS3,None
commit_hash,SHA checksum of repository revision that the sample was acquired at,FALSE,FALSE,FALSE,FALSE,TRUE
start_line,line in the file in which the sample starts,FALSE,FALSE,FALSE,FALSE,TRUE
end_line,line in the file in which the sample ends,FALSE,FALSE,FALSE,FALSE,TRUE
id,a numeric identifier of the review,FALSE,,FALSE,FALSE,TRUE
reviewer_id,a numeric identifier of the reviewer,FALSE,,FALSE,FALSE,TRUE
sample_id,Sample identifier of the fragment,FALSE,,FALSE,FALSE,TRUE
review_timestamp,date and time (millisecond precision) when the sample was acquired,FALSE,FALSE,FALSE,FALSE,TRUE
code_name,a fully qualified name of the code sample in case of constructors and static methods a dot is used instead of a hash.,FALSE,FALSE,FALSE,FALSE,TRUE
repository,a git url of the repository,FALSE,FALSE,FALSE,FALSE,TRUE
path,path in the repository that can be used to retrieve the sample,FALSE,FALSE,FALSE,FALSE,TRUE
link,a link that can be used to view the sample in a browser.,FALSE,FALSE,FALSE,FALSE,TRUE
Is_from_industry_relevant_project,denotes whether source project was classified as industry-relevant in [1],FALSE,FALSE,FALSE,FALSE,TRUE
organic_filerelativepath,File relative path,FALSE,FALSE,FALSE,FALSE,TRUE
organic_startline,line where the smell detected by the tool begins,FALSE,FALSE,FALSE,FALSE,TRUE
organic_endline,line where the smell detected by the tool ends,FALSE,FALSE,FALSE,FALSE,TRUE
organic_smellReason,reason that caused the smell,FALSE,FALSE,FALSE,FALSE,TRUE
pmd_package,method or class path,FALSE,FALSE,FALSE,FALSE,TRUE
pmd_file,method or class path complete with file name,FALSE,FALSE,FALSE,FALSE,TRUE
pmd_line,line of the smell detected,FALSE,FALSE,FALSE,FALSE,TRUE
pmd_description,description of the smell found,FALSE,FALSE,FALSE,FALSE,TRUE
pmd_rule_set,"If the smell found is from Best Practices, code style,design,documentation,Error Prone,
Multithreading,Performance, Security or Additional rulesets",FALSE,FALSE,FALSE,FALSE,TRUE
implementation_project name,project name of implementation-type code smells,FALSE,FALSE,FALSE,FALSE,TRUE
Implementation_code_name,method or class path of design-type code smells,FALSE,FALSE,FALSE,FALSE,TRUE
implementation_type name,Type name of implementation-type code smells,FALSE,FALSE,FALSE,FALSE,TRUE
implementation_method name,name of the method in which the smell was detected,FALSE,FALSE,FALSE,FALSE,TRUE
implementation_method start line no,line where the smell detected by the tool begins,FALSE,FALSE,FALSE,FALSE,TRUE
designite_implementation smell,Designate smells that occur at the code implementation level,FALSE,FALSE,FALSE,FALSE,TRUE
implementation_cause of the smell,points out the cause of the smell of implementetion-type smells aslongmethod,FALSE,FALSE,FALSE,FALSE,TRUE
designite_project name,project name of design-type codesmells,FALSE,FALSE,FALSE,FALSE,TRUE
designite_package name,Package Name of design-type codesmells,FALSE,FALSE,FALSE,FALSE,TRUE
designite_type name,Type name of design-type codesmells,FALSE,FALSE,FALSE,FALSE,TRUE
ck_class_file,class file name,FALSE,FALSE,FALSE,FALSE,TRUE
ck_method_file,file name,FALSE,FALSE,FALSE,FALSE,TRUE
ck_method,Method name,FALSE,FALSE,FALSE,FALSE,TRUE
ck_method_constructor,Constructor name,FALSE,FALSE,FALSE,FALSE,TRUE
ck_method_line,Method line,FALSE,FALSE,FALSE,FALSE,TRUE
smell_designite,Merge between Designite_implementation Smell column with Designite_Design Smell column,FALSE,FALSE,FALSE,FALSE,TRUE
severity,"severity classified by experts in relation to smells, these severities are divided: critical, major, minor, and none",FALSE,FALSE,FALSE,FALSE,TRUE
agreement_experts_has_smell,"checks if a code sample in mlcq has at least minor, major or critical",FALSE,FALSE,FALSE,FALSE,TRUE
agreement_has_smell,checks if at least 2 method (from 3 tools + MLCQ) found any smell,FALSE,FALSE,FALSE,FALSE,TRUE
PMD_Problem,problem number related to what caused the smell,FALSE,TRUE,TRUE,FALSE,FALSE
designite_design smell,Designite identifies design smells and presents them in a view that classifies them based on the fundamental principle they violate,FALSE,FALSE,FALSE,FALSE,TRUE
designite_cause of the smell,points out the cause of the smell of design-type smells as feature envy,FALSE,FALSE,FALSE,FALSE,TRUE
ck_class,Detected smell class,FALSE,FALSE,FALSE,FALSE,TRUE
ck_class_type,"Type function or class,",FALSE,FALSE,FALSE,FALSE,TRUE
system,system identification number.,FALSE,FALSE,FALSE,FALSE,TRUE
smell_organic,name of the smell organic tool,FALSE,TRUE,TRUE,FALSE,FALSE
smell_pmd,name of the smell pmd tool,FALSE,TRUE,TRUE,FALSE,FALSE
type,whether the reviewed code sample is a class or a function,TRUE,TRUE,FALSE,FALSE,FALSE
smell,mlcq default column that experts classify its smell,FALSE,FALSE,FALSE,FALSE,TRUE
longmethod_label,"checks if the code sample was classified for experts as a long method smell with at 
least one of the severity classes: minor, major or critical",TRUE,FALSE,FALSE,FALSE,FALSE
featureenvy_label,"checks if the code sample was classified for experts as a feature envy smell with at 
least one of the severity classes: minor, major or critical",TRUE,FALSE,FALSE,FALSE,FALSE
dataclass_label,"checks if the code sample was classified for experts as a dataclass smell with at 
least one of the severity classes: minor, major or critical",TRUE,FALSE,FALSE,FALSE,FALSE
blob_label,"checks if the code sample was classified for experts as a blob smell with at 
least one of the severity classes: minor, major or critical",TRUE,FALSE,FALSE,FALSE,FALSE
agreement_smell_type,checks if at least 3 tools found the MLCQ code smell type,FALSE,FALSE,TRUE,FALSE,FALSE
organic_weighwofclass,the percentage number of public methods of a class that are not getters/setters.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_numberofaccessormethods,"is a software quality metric that measures the total number of accessor methods (getters and setters) 
of a class or component.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_classeffectivelinesofcode,"is a measure of software quality that evaluates the amount of useful and productive code in a specific class.
It focuses on identifying and quantifying only the code that actually contributes to the functionality of the class, ignoring irrelevant lines like comments, dead code, and blank lines.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_LCOM3,"is the acronym for Class Cohesion Metric, a measure of how cohesive a class is in terms of its responsibilities. A cohesive 
class is one that has a single, well-defined purpose and its responsibilities are all related to each other. 
The LCOM3 metric is calculated by counting the number of methods of a class that access member variables of other classes.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_TightClassCohesion,is a software quality measure that evaluates the internal cohesion of a class. A class with high cohesion is composed of methods and attributes that are strongly related to each other and contribute to a single objective.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_IsAbstract,indicates whether a class or method is abstract.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_PublicFieldCount,refers to the number of public fields in a class or struct,FALSE,TRUE,TRUE,FALSE,FALSE
organic_OverrideRatio,is a measure used to evaluate how often predefined values ​​are replaced by values ​​generated by a model or algorithm.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_WeightedMethodCount,"is a software metric that measures the complexity of a class in object-oriented code.
It is calculated as the sum of the cyclomatic complexity of all methods in the class. Cyclomatic complexity is a measure of the number of execution paths in a method, which indicates how complex and difficult to understand the method is.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_ChangingMethods,"is a measure of how frequently the code in a codebase changes. It is calculated by counting the number 
of methods that have been modified in a given period of time. A high ChangingMethods score indicates that the 
codebase is constantly evolving and may be more difficult to maintain",FALSE,TRUE,TRUE,FALSE,FALSE
organic_NumberOfTryStatements,represents the number of try statements in a software program.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_MaxNesting,The MaxNesting metric is also used in code analysis tools to evaluate code readability and maintainability.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_NumberOfFinallyStatements,The NumberOfFinallyStatements metric is used to evaluate code quality in terms of exception management.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_NumberOfThrowStatements,"NumberOfThrowStatements is a software metric that measures the number of throw statements in a source code. 
These instructions are used to throw exceptions, which are unexpected events that can occur during the execution of a program.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_NumberOfTryStatementsWithNoCatchAndFinally,"Number os statements with no catch and finally in a source code. 
These instructions are used to treat exceptions.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_CyclomaticComplexity,"Cyclomatic Complexity indicates how many different decisions the code needs to make to be completely executed. 
The higher the metric value, the more complex the code and, consequently, the more difficult to understand, test and maintain.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_CouplingIntensity,"This metric calculates, for a method X, how many calls were made to other methods (each method is only counted once, so it ignores multiple calls to the same method).",FALSE,TRUE,TRUE,FALSE,FALSE
organic_NumberOfAccessedVariables,"The NumberOfAccessedVariables metric, also known as NAv, represents the number of variables accessed in a given program or code. This metric is often used to evaluate code complexity and efficiency, especially in object-oriented programming languages.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_MethodEffectiveLinesOfCode,"MethodEffectiveLinesOfCode is a software metric that measures the number of effective lines of code in a method. Effective lines of code are those that actually execute statements, excluding empty lines, lines that contain only comments, and lines that contain only one statement",FALSE,TRUE,TRUE,FALSE,FALSE
organic_CouplingDispersion,"measures the distribution of dependency between software modules. This metric is particularly useful for identifying highly 
coupled modules that may be making code difficult to maintain and evolve.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_ExceptionalLOC,"ExceptionalLOC (Exceptional Lines of Code) is a metric used to measure sections of code that present characteristics that
 may indicate quality problems or malfunctions.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_NumberOfDummyExceptionHandlers,"NumberOfDummyExceptionHandlers is a metric that measures the presence of generic and unnecessary  exception handlers in the code. These handlers, also known as ""catch-all"" or ""swallow exceptions"", catch all exceptions without any specific handling, which can mask errors and make debugging difficult.",FALSE,TRUE,TRUE,FALSE,FALSE
organic_ParameterCount,The ParameterCount metric refers to the total number of parameters used in a function or method.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_ChangingClasses,The ChangingClasses metric quantifies how often classes in a project are modified over time.,FALSE,TRUE,TRUE,FALSE,FALSE
organic_MaxCallChain,Contains the maximum call chain,FALSE,TRUE,TRUE,FALSE,FALSE
organic_NumberOfCatchStatements,the column contains the Number of capture statements,FALSE,TRUE,TRUE,FALSE,FALSE
organic_ThrownExceptionTypesCount,This column contains Throwing Exception Type Count,FALSE,TRUE,TRUE,FALSE,FALSE
PMD_Priority,It indicates how critical the problem is and how much it needs to be fixed.,FALSE,TRUE,TRUE,FALSE,FALSE
ck_class_cbo,"Counts the number of dependencies a class has. The tools checks for any type used in the entire class (field declaration, method return types, variable declarations, etc). It ignores dependencies to Java itself (e.g. java.lang.String).,",FALSE,TRUE,TRUE,FALSE,FALSE
ck_class_cboModified,"Counts the number of dependencies a class has. It is very similar to the CKTools original CBO. However, this metric considers a dependency from a class as being both the references the type makes to others and the references that it receives from other types.",FALSE,TRUE,TRUE,FALSE,FALSE
ck_class_fanin,"Counts the number of input dependencies a class has, i.e, the number of classes that reference a particular class. For instance, given a class X, the fan-in of X would be the number of classes that call X by referencing it as an attribute, accessing some of its attributes, invoking some of its methods, etc.,",FALSE,TRUE,TRUE,FALSE,FALSE
ck_class_fanout,"Counts the number of output dependencies a class has, i.e, the number of other classes referenced by a particular class. In other words, given a class X, the fan-out of X is the number of classes called by X via attributes reference, method invocations, object instances, etc.",FALSE,TRUE,TRUE,FALSE,FALSE
ck_class_wmc,"It counts the number of branch instructions in a class,",FALSE,TRUE,TRUE,FALSE,FALSE
ck_class_dit,"It counts the number of ""fathers"" a class has. All classes have DIT at least 1 (everyone inherits java.lang.Object). In order to make it happen, classes must exist in the project (i.e. if a class depends upon X which relies in a jar/dependency file, and X depends upon other classes, DIT is counted as 2).",FALSE,TRUE,TRUE,FALSE,FALSE
ck_class_noc,It counts the number of immediate subclasses that a particular class has.,FALSE,TRUE,TRUE,FALSE,FALSE
ck_class_rfc,"Counts the number of unique method invocations in a class. As invocations are resolved via static analysis, this implementation fails when a method has overloads with same number of parameters, but different types.,",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_lcom,"Calculates LCOM metric. This is the very first version of metric, which is not reliable. LCOM-HS can be better (hopefully, you will send us a pull request).,",FALSE,TRUE,TRUE,FALSE,FALSE
lCK_Class_com*,"This metric is a modified version of the current version of LCOM implemented in CK Tool. LCOM* is a normalized metric that computes the lack of cohesion of class within a range of 0 to 1. Then, the closer to 1 the value of LCOM* in a class, the less the cohesion degree of this respective class. The closer to 0 the value of LCOM* in a class, the most the cohesion of this respective class. This implementation follows the third version of LCOM* defined in [1].",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_tcc,"Measures the cohesion of a class with a value range from 0 to 1. TCC measures the cohesion of a class via direct connections between visible methods, two methods or their invocation trees access the same class variable.",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_lcc,"Similar to TCC but it further includes the number of indirect connections between visible classes for the cohesion calculation. Thus, the constraint LCC >= TCC holds always.",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_totalMethodsQty,Counts the number of all methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_staticMethodsQty,Counts the number of static methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_publicMethodsQty,Counts the number of public methods,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_privateMethodsQty,Counts the number of private methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_protectedMethodsQty,Counts the number of protected methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_defaultMethodsQty,Counts the number of default methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_visibleMethodsQty,Counts the number of visible methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_abstractMethodsQty,Counts the number of abstract methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_finalMethodsQty,Counts the number of final methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_synchronizedMethodsQty,Counts the number of synchronized methods.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_totalFieldsQty,Counts the number of all fields,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_staticFieldsQty,Counts the number of static fields,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_publicFieldsQty,Counts the number of public fields,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_privateFieldsQty,Counts the number of private fields,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_protectedFieldsQty,Counts the number of protected fields,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_defaultFieldsQty,Counts the number of default fields,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_finalFieldsQty,Counts the number of final fields,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_synchronizedFieldsQty,Counts the number of synchronized fields,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_nosi,Number of static invocations. Counts the number of invocations to static methods,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_loc,"It counts the numer of lines of code, ignoring empty lines and comments",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_returnQty,The number of return instructions,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_loopQty,"The number of loops like for, while, do while and enhanced for",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_comparisonsQty,The number of comparisons == and !=,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_tryCatchQty,The number of try/catches,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_parenthesizedExpsQty,The number of expressions inside parenthesis,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_stringLiteralsQty,The number of string literals,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_numbersQty,"The number of numbers literals int, long, double, float",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_assignmentsQty,The number of same or different comparisons,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_mathOperationsQty,"The number of math operations (times, divide, remainder, plus, minus, left shit, right shift)",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_variablesQty,The number of declared variables,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_maxNestedBlocksQty,The highest number of blocks nested together,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_anonymousClassesQty,The number of anonymous classes,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_innerClassesQty,The number of inner classes,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_lambdasQty,The number of lambda expressions,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_uniqueWordsQty,"The algorithm basically counts the number of words in a class, after removing Java keywords",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_modifiers,the number of modifiers in a software class or module. Modifiers are programming language keywords or constructs that change the behavior of a class or module.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Class_logStatementsQty,Number of log statements in the source code.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_class,Class of method,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_cbo,"Counts the number of dependencies a class has. The tools checks for any type used in the entire class (field declaration, method return types, variable declarations, etc). It ignores dependencies to Java itself (e.g. java.lang.String).,",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_cboModified,"Counts the number of dependencies a class has. It is very similar to the CKTools original CBO. However, this metric considers a dependency from a class as being both the references the type makes to others and the references that it receives from other types.,",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_fanin,"Counts the number of input dependencies a class has, i.e, the number of classes that reference a particular class. For instance, given a class X, the fan-in of X would be the number of classes that call X by referencing it as an attribute, accessing some of its attributes, invoking some of its methods, etc.,",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_fanout,"Counts the number of output dependencies a class has, i.e, the number of other classes referenced by a particular class. In other words, given a class X, the fan-out of X is the number of classes called by X via attributes reference, method invocations, object instances, etc.,",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_wmc,"It counts the number of branch instructions in a class.,t counts the number of branch instructions in a class.",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_rfc,"Counts the number of unique method invocations in a class. As invocations are resolved via static analysis, this implementation fails when a method has overloads with same number of parameters, but different types.,",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_loc,"It counts the lines of count, ignoring empty lines and comments (i.e., its Source Lines of Code, or SLOC). The number of lines here might be a bit different from the original file, as we use JDTs internal representation of the source code to calculate it.,",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_returnsQty,The number of return instructions.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_variablesQty,Number of declared variables.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_parametersQty,Number of parameters for method.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_methodsInvokedQty,the number of methods or functions that are invoked within a specific method or function in software.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_methodsInvokedLocalQty,the number of calls to functions or methods that are present within the local scope of the method under analysis.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_methodsInvokedIndirectLocalQty,"the number of calls to methods or functions that are not directly defined within the same module or class, but that are eventually called through other local functions.",FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_loopQty,The number of loops.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_comparisonsQty,The number of comparisons.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_tryCatchQty,The number of try/catches.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_parenthesizedExpsQty,The number of expressions inside parenthesis.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_stringLiteralsQty,The number of string literals.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_numbersQty,the number of numeric variables defined within a class.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_assignmentsQty,the number of assignments (i.e. actions of assigning values ​​to variables) within a method or function in software.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_mathOperationsQty,The number of math operations.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_maxNestedBlocksQty,The highest number of blocks nested together.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_anonymousClassesQty,The number of anonymous classes.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_innerClassesQty,The number of inner classes.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_lambdasQty,The number of lambda expressions.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_uniqueWordsQty,The number of unique words in the source code.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_modifiers,the number of modifier counts of a software class or module. Modifiers are programming language keywords or constructs that change the behavior of a class or module.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_logStatementsQty,The number of log statements in the source code.,FALSE,TRUE,TRUE,FALSE,FALSE
CK_Method_hasJavaDoc,Boolean indicating whether a method has javadoc. (Only at method-level for now),FALSE,TRUE,TRUE,FALSE,FALSE
Stars,number of stars in the system.,FALSE,FALSE,TRUE,FALSE,FALSE
Watching,Number of views in the system.,FALSE,FALSE,TRUE,FALSE,FALSE
Commits,Number of commits in the system,FALSE,FALSE,TRUE,FALSE,FALSE
LOC,number of system lines,FALSE,FALSE,TRUE,FALSE,FALSE
Number of Contributors,number of system contributors,FALSE,FALSE,TRUE,FALSE,FALSE
cluster_kmeans_All,"K-means is an algorithm that trains a model to group similar objects together. To do this, it maps each 
observation in the input dataset to a point in n-dimensional space (where n is the number of attributes of the observation)",FALSE,FALSE,TRUE,FALSE,FALSE
cluster_Gaussian_All,"Gaussian identifies clusters of different shapes and sizes. It is widely used in pattern recognition, density
 estimation and data compression",FALSE,FALSE,TRUE,FALSE,FALSE
cluster_kmeans_LOC,"K-means is an algorithm that trains a model to group similar objects together. To do this, it maps each
observation in the input dataset to a point in n-dimensional space (where n is the number of attributes of the observation). In this case he used K-means just considering the lines of code",FALSE,FALSE,TRUE,FALSE,FALSE
cluster_Gaussian_LOC," Gaussian identifies clusters of different shapes and sizes. It is widely used in pattern recognition, density
 estimation and data compression. In this case he used Gaussian just considering the lines of code",FALSE,FALSE,TRUE,FALSE,FALSE
smell_organic_aglomeration,the tool organic automatically classified more than one smell (independently of the type),FALSE,FALSE,TRUE,FALSE,FALSE
smell_PMD_aglomeration,the tool PMD automatically classified more than one smell (independently of the type),FALSE,FALSE,TRUE,FALSE,FALSE
smell_Designite_aglomeration,the tool Designite automatically classified more than one smell (independently of the type) ,FALSE,FALSE,TRUE,FALSE,FALSE
smell_organic_num_aglomeration,checks the number of agglomerations detected by the organic tool,FALSE,FALSE,TRUE,FALSE,FALSE
smell_PMD_num_aglomeration,checks the number of agglomerations detected by the pmd tool,FALSE,FALSE,TRUE,FALSE,FALSE
smell_Designite_num_aglomeration,checks the number of agglomerations detected by the designite tool,FALSE,FALSE,TRUE,FALSE,FALSE
smell_organic_longmethod,"checks if the smell long method was detected by organic, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_organic_featureenvy,"checks if the smell feature envy was detected by organic, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_organic_dataclass,"checks if the smell ldataclass was detected by organic, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_organic_blob,"checks if the smell blob was detected by organic, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_PMD_longmethod,"checks if the smell long method was detected by pmd, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_PMD_featureenvy,"checks if the smell feature envy was detected by pmd, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_PMD_dataclass,"checks if the smell data class was detected by pmd, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_PMD_blob,"checks if the smell blob was detected by pmd, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_Designite_longmethod,"checks if the smell long method was detected by designite, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_Designite_featureenvy,"checks if the smell feature envy was detected by designite, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_Designite_dataclass,"checks if the smell dataclass was detected by designite, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
smell_Designite_blob,"checks if the smell blob was detected by designite, if the smell is detected, we classify as 1 otherwise 0",FALSE,FALSE,TRUE,FALSE,FALSE
background,"classifies whether the developers' backgorund is senior, middle or junior. Those that are blank are the developers who did not talk about their experience",FALSE,TRUE,TRUE,FALSE,FALSE